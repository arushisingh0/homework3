---
title: "Homework 3"
author: "Arushi Singh{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
#format: html
format: pdf
editor: 
  markdown: 
    wrap: 72
---

[Link to the Github repository](https://github.com/psu-stat380/hw-3)

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
## Due: Thu, Mar 2, 2023 \@ 11:59pm

Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine
Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset
from the UCI Machine Learning Repository. The dataset consists of red
and white *vinho verde* wine samples, from the north of Portugal. The
goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 50 points

Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in
data frames `df1` and `df2`.

```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read_delim(url1, delim = ";", escape_double = FALSE, trim_ws = TRUE)
df2 <- read_delim(url2, delim = ";", escape_double = FALSE, trim_ws = TRUE)
```

------------------------------------------------------------------------

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1.  Combine the two data frames into a single data frame `df`, adding a
    new column called `type` to indicate whether each row corresponds to
    white or red wine.
2.  Rename the columns of `df` to replace spaces with underscores
3.  Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
4.  Convert the `type` column to a factor
5.  Remove rows (if any) with missing values.

```{R}
library(tidyverse)
#df1<- df1 %>%
 # add_column(type = "white")
#df2 <- df2 %>%
 # add_column(type = "red")

df <- rbind(df1,df2)
```

Your output to `R dim(df)` should be

    [1] 6497   11

------------------------------------------------------------------------

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the
the difference in means (with the equal variance assumption)

1.  Using `df` compute the mean of `quality` for red and white wine
    separately, and then store the difference in means as a variable
    called `diff_mean`.

2.  Compute the pooled sample variance and store the value as a variable
    called `sp_squared`.

3.  Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and
    store its value in a variable called `t1`.

``` {r}
# Compute mean of quality for red and white wine separately
mean_red <- mean(df$quality[df$type == "red"])
mean_white <- mean(df$quality[df$type == "white"])

# Compute difference in means
diff_mean <- mean_red - mean_white

# Compute pooled sample variance
n_red <- sum(df$type == "red")
n_white <- sum(df$type == "white")
var_red <- var(df$quality[df$type == "red"])
var_white <- var(df$quality[df$type == "white"])
sp_squared <- ((n_red - 1) * var_red + (n_white - 1) * var_white) / (n_red + n_white - 2)

# Compute t-statistic
t1 <- diff_mean / (sqrt(sp_squared * (1/n_red + 1/n_white)))
```

------------------------------------------------------------------------

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to
perform a two-sample $t$-Test without having to compute the pooled
variance and difference in means.

Perform a two-sample t-test to compare the quality of white and red
wines using the `t.test()` function with the setting `var.equal=TRUE`.
Store the t-statistic in `t2`.

``` {r}
t2 <- t.test(quality ~ type, data = df, var.equal = TRUE)$statistic
```

------------------------------------------------------------------------

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the
`lm()` function, and extract the $t$-statistic for the `type`
coefficient from the model summary. Store this $t$-statistic in `t3`.

``` {r}
fit <- lm(quality ~ type, data = df)
fit
t3 <- summary(model)$coefficients["type", "t value"]
```

------------------------------------------------------------------------

###### 1.6 (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can
you conclude from this? Why?

``` {r}
x <- c(t1, t2, t3)  %>%
  broom::tidy()
x
```

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 25 points

Collinearity
:::

------------------------------------------------------------------------

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response
variable `quality`. Use the `broom::tidy()` function to print a summary
of the fitted model. What can we conclude from the model summary?

``` {r}
model <- lm(quality ~ ., data = df)
model %>%
  broom::tidy()
```
From the model summary, we can see that several predictors have significant effects on the response variable quality, as indicated by their low p-values. For example, the alcohol predictor has the lowest p-value, indicating that it is the most significant predictor in the model. Other significant predictors include volatile.acidity, citric.acid, sulphates, and total.sulfur.dioxide.

The model summary also shows the adjusted $R^2$ value, which indicates how well the model fits the data, as well as the F-statistic and p-value, which indicate whether the overall model is significant. In this case, the adjusted $R^2$ is 0.2945 and the p-value for the F-statistic is very small (less than 2.2e-16), indicating that the overall model is significant.

------------------------------------------------------------------------

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only
`citric_acid` as the predictor, and another with only
`total_sulfur_dioxide` as the predictor. In both models, use `quality`
as the response variable. How does your model summary compare to the
summary from the previous question?

``` {r}
model_citric <- lm(quality ~ df$`citric acid`, data = df)
model_citric
```

``` {r}
model_sulfur <- lm(quality ~ df$`total sulfur dioxide`, data = df)
model_sulfur
```
Comparing the model summaries for the two simple linear regression models to the summary from the previous question, we see that the adjusted $R^2$ values are lower in the simple models compared to the multiple linear regression model with all predictors. This is because the multiple linear regression model takes into account the effects of multiple predictors simultaneously, whereas the simple models only consider the effect of one predictor at a time.

Additionally, we can see that the p-values for the predictors in the simple models are generally higher than in the multiple linear regression model. This is because the simple models do not take into account the effects of other predictors, and thus some of the predictors may appear to be less significant when considered alone.
------------------------------------------------------------------------

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

``` {r}
library(corrplot)
ndf <- df %>% 
  keep(is.numeric) %>%
  cor()
corrplot(ndf, method = "number")
```

------------------------------------------------------------------------

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the
full model using `vif()` function. What can we conclude from this?

``` {r}
vif(model)
```

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 40 points

Variable selection
:::

------------------------------------------------------------------------

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the
starting model. Store the final formula in an object called
`backward_formula` using the built-in `formula()` function in R

``` {r}
backward_model <- step(model, direction = "backward")
backward_formula <- formula(backward_model)
```

------------------------------------------------------------------------

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the
starting model. Store the final formula in an object called
`forward_formula` using the built-in `formula()` function in R

``` {r}
forward_model <- step(null_model, direction = "forward")
forward_formula <- formula(forward_model)
```

------------------------------------------------------------------------

###### 3.3 (10 points)

1.  Create a `y` vector that contains the response variable (`quality`)
    from the `df` dataframe.

2.  Create a design matrix `X` for the `full_model` object using the
    `make_model_matrix()` function provided in the Appendix.

3.  Then, use the `cv.glmnet()` function to perform LASSO and Ridge
    regression with `X` and `y`.

``` {r}
library(glmnet)

# Create the y vector
y <- df$quality

# Create the design matrix X using make_model_matrix() function
X <- make_model_matrix(model,df)

# Perform LASSO regression with cv.glmnet()
lasso_fit <- cv.glmnet(X, y, alpha = 1)

# Perform Ridge regression with cv.glmnet()
ridge_fit <- cv.glmnet(X, y, alpha = 0)
```

Create side-by-side plots of the ridge and LASSO regression results.
Interpret your main findings.

``` {r}
par(mfrow=c(1, 2))
plot.cv.glmnet(lasso_fit, main = "LASSO Regression")
plot.cv.glmnet(ridge_fit, main = "Ridge Regression")
```

------------------------------------------------------------------------

###### 3.4 (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se`
value? What are the variables selected by LASSO?

Store the variable names with non-zero coefficients in `lasso_vars`, and
create a formula object called `lasso_formula` using the
`make_formula()` function provided in the Appendix.

------------------------------------------------------------------------

###### 3.5 (5 points)

Print the coefficient values for ridge regression at the `lambda.1se`
value? What are the variables selected here?

Store the variable names with non-zero coefficients in `ridge_vars`, and
create a formula object called `ridge_formula` using the
`make_formula()` function provided in the Appendix.

------------------------------------------------------------------------

###### 3.6 (10 points)

What is the difference between stepwise selection, LASSO and ridge based
on you analyses above?

I wasn't to work out the error messages I was getting with make_model_matrix, but I can still describe the differences between these three variable selection methods. Stepwise selection chooses variables based on statistical criteria such as AIC values. LASSO regression adds a penalty term to the regression model that shrinks the coefficients towards zero, which reduces the number of predictors. This can result in a ssparse model, since some predictors are driven to have a coefficient of zero. Ridge regression also adds a penalty term to the model, but the term is based on the squared amount of the coefficients, not their absolute values, which results in variable shrinking, not selection. Based on this information, the stepwise selection had the least predictors, and the ridge regression had the most.  

<br><br><br><br> <br><br><br><br> ---

## Question 4

::: callout-tip
## 70 points

Variable selection
:::

------------------------------------------------------------------------

###### 4.1 (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the
covariates. How many different models can we create using any subset of
these $10$ covariates as possible predictors? Justify your answer.

We can create 1024 different models, since 2^10 = 1024. 

------------------------------------------------------------------------

###### 4.2 (20 points)

Store the names of the predictor variables (all columns except
`quality`) in an object called `x_vars`.

``` {r}
x_vars <- colnames(df %>% select(-quality))
```

Use:

-   the `combn()` function (built-in R function) and
-   the `make_formula()` (provided in the Appendix)

to **generate all possible linear regression formulas** using the
variables in `x_vars`. This is most optimally achieved using the `map()`
function from the `purrr` package.

``` r
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars) # Insert code here
    map(~make_formula(quality,vars)) # Insert code here
  }
) %>% unlist()

```

If your code is right the following command should return something
along the lines of:

``` r
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

------------------------------------------------------------------------

###### 4.3 (10 points)

Use `map()` and `lm()` to fit a linear regression model to each formula
in `formulas`, using `df` as the data source. Use `broom::glance()` to
extract the model summary statistics, and bind them together into a
single tibble of summaries using the `bind_rows()` function from
`dplyr`.

``` r
library(dplyr)
library(purrr)
library(broom)
models <- map(formulas, ...) # Insert your code here
summaries <- map(models, ...) # Insert your code here

model_summaries <- map_dfr(formulas, ~{
  formula <- make_formula(.x, response = "quality")
  lm(formula, data = df) %>% glance()
})
model_summaries
 ```

------------------------------------------------------------------------

###### 4.4 (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to
identify the formula with the ***highest*** adjusted R-squared value.

``` r
library(dplyr)
adj_r_squared <- summaries %>% 
  select(formula, adj.r.squared)
  
rsq_formula <- adj_r_squared %>% 
  filter(adj.r.squared == max(adj.r.squared))
```

Store resulting formula as a variable called `rsq_formula`.


------------------------------------------------------------------------

###### 4.5 (5 points)

Extract the `AIC` values from `summaries` and use them to identify the
formula with the ***lowest*** AIC value.

``` r
library(dplyr)
aic_values <- summaries %>% 
  pull(AIC)

aic_formula <- formulas[[which.min(aic_values)]]

# Store resulting formula as a variable called `aic_formula`.
```

------------------------------------------------------------------------

###### 4.6 (15 points)

Combine all formulas shortlisted into a single vector called
`final_formulas`.

``` r
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

-   Are `aic_formula` and `rsq_formula` the same? How do they differ
    from the formulas shortlisted in question 3?
    
    They're not the same because rsq_formula contains all predictor variables, but aic_formula only contains predictors selected by the LASSO model. 
    
-   Which of these is more reliable? Why?
    
    aic_formula is usually more relaiable because it considers model complexity, while rsq_formula does not. 

-   If we had a dataset with $10,000$ columns, which of these methods
    would you consider for your analyses? Why?
    
    We'd probably have to use aic_formula, or LASSO regression, since it'd be just too much information. We could also use Ridge regression, but both methods decrease the number of predictors using penalty terms, and that would be prioritized in this scenario. 

------------------------------------------------------------------------

###### 4.7 (10 points)

Use `map()` and `glance()` to extract the
`sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model
obtained from `final_formulas`. Bind them together into a single data
frame `summary_table`. Summarize your main findings.

``` r
summary_table <- map(
  final_formulas, 
  sigma, adj.r.squared, AIC, df, p.value) %>%
) %>% bind_rows()

summary_table %>% knitr::kable()

# Print summary statistics
summary_table
```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

# Appendix

#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x`
and outputs a `formula` object with `quality` as the response variable
and the columns of `x` as the covariates.

``` {r}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and
outputs a **rescaled** model matrix `X` in a format amenable for
`glmnet()`

``` {r}
make_model_matrix <- function(formula){
  X <- model.matrix(rsq_formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
